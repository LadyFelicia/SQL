**In this project, I analysis the database called chinook which represents a digital media store that includes tables for artists, albums, tracks, media tracks, invoices, invoice items, playlists, playlist track, employees,genres, and customers to gather interesting data.**

## Here is my SQL query to gather this intresting data:

SELECT *
FROM chinook.albums
LIMIT 5;

SELECT *
FROM chinook.artists
LIMIT 5;

SELECT *
FROM chinook.customers
LIMIT 5;

SELECT *
FROM chinook.employees;

SELECT *
FROM chinook.genres
LIMIT 5;

SELECT *
FROM chinook.invoice_items
LIMIT 5;

SELECT *
FROM chinook.invoices
LIMIT 5;

SELECT *
FROM chinook.media_types
LIMIT 5;

SELECT *
FROM chinook.playlist_track
LIMIT 5;

SELECT *
FROM chinook.playlistS
LIMIT 5;

SELECT *
FROM chinook.tracks
LIMIT 5;

-- 1. What track has the longest duration?
SELECT Name, MAX(Milliseconds)
FROM chinook.tracks
GROUP BY Name
ORDER BY Max(Milliseconds) DESC
LIMIT 1;

-- 2. What album sold the most?
SELECT a.Title, SUM(inv.Total) AS TotalSales
FROM chinook.albums AS a
INNER JOIN chinook.tracks AS t
ON a.AlbumId=t.AlbumId
INNER JOIN chinook.invoice_items AS int
ON t.TrackId=int.TrackId
INNER JOIN chinook.invoices AS inv
ON int.InvoiceId=inv.InvoiceId
GROUP BY a.Title
ORDER BY TotalSales DESC
LIMIT 1; 

-- 3. What are the different genres in the tracks and how many among them are classical?
SELECT g.Name AS Genre, COUNT(t.TrackId) AS track
FROM chinook.genres AS g
LEFT JOIN chinook.tracks AS t
ON g.GenreID=t.GenreId
WHERE Genre='Classical'
ORDER BY Genre; 

-- 4. Show Customers (their full names, customer ID, and country) who are not in the US.  
SELECT CustomerId,FirstName,LastName,Country
FROM chinook.customers
WHERE Country <> 'USA';

-- 5. Show only the Customers from Brazil.
SELECT CustomerId, FirstName, LastName, Country 
FROM chinook.customers
WHERE Country = 'Brazil';

-- 6. Find the Invoices of customers who are from Brazil. 
SELECT c.FirstName,c.LastName,i.InvoiceId,i.InvoiceDate,i.BillingCountry 
FROM chinook.invoices AS i
INNER JOIN chinook.customers AS c
ON i.CustomerId=c.CustomerId
WHERE i.BillingCountry = 'Brazil'
ORDER BY i.invoiceId;

-- 7. Show the Employees who are Sales Agents.
SELECT LastName, FirstName,Title 
FROM chinook.employees
WHERE Title = 'Sales Support Agent';

-- 8. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM chinook.invoices;

-- 9. Provide a query that shows the invoices associated with each sales agent.
SELECT InvoiceId,InvoiceDate,e.LastName,e.FirstName
FROM chinook.invoices AS i
INNER JOIN chinook.customers AS c
ON i.CustomerId=c.CustomerId
INNER JOIN chinook.employees AS e
ON c.SupportRepid=e.Employeeid
WHERE e.Title ='Sales Support Agent'

-- 10. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT emp.LastName,
emp.Firstname,
cust.FirstName, 
cust.LastName,
cust.Country, 
inv.total
FROM chinook.employees AS emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;

-- 11. How many Invoices were there in 2009?
SELECT COUNT(InvoiceId)
FROM chinook.invoices
WHERE InvoiceDate LIKE '2009%';

-- 12. What are the total sales for 2009?
SELECT SUM(invo.Total) AS 'Total Sales'
FROM chinook.invoices AS invo
WHERE invo.InvoiceDate LIKE '2009%';

-- 13. Write a query that includes the purchased track name with each invoice line ID.
SELECT t.Name AS 'Purchased track name', 
items.InvoiceLineId AS 'Invoice Line ID'
FROM chinook.tracks AS t
INNER JOIN chinook.invoice_items AS items
ON t.TrackId=items.TrackId;

-- 14. Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT items.InvoiceLineId, 
t.Name AS 'Purchased track name',
art.Name AS 'Artist Name'
FROM chinook.artists AS art
INNER JOIN chinook.albums AS alb
ON art.ArtistId=alb.ArtistId
INNER JOIN chinook.tracks AS t
ON alb.Albumid=t.Albumid
INNER JOIN chinook.invoice_items AS items
ON t.TrackId=items.TrackId;

-- 15. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT trk.Name As 'Track Name',
alb.Title AS 'Album Name',
typ.Name AS 'Media type',
gen.Name AS 'Genre' 
FROM chinook.tracks AS trk
INNER JOIN chinook.albums AS alb
ON trk.AlbumId=alb.AlbumId
INNER JOIN chinook.media_types AS typ
ON trk.MediaTypeId=typ.MediaTypeId
INNER JOIN chinook.genres AS gen
ON trk.GenreId=gen.GenreId;

-- 16. Show the total sales made by each sales agent.
SELECT emp.EmployeeId, 
ROUND(SUM(invo.Total),2) AS 'Total Sales',
emp.FirstName AS 'Sales agent First Name',
emp.LastName AS 'Sales agent Last Name'
FROM chinook.invoices AS invo
INNER JOIN chinook.customers AS cus
ON invo.CustomerId=cus.CustomerId
INNER JOIN chinook.employees AS emp
ON cus.SupportRepId=emp.Employeeid
GROUP BY emp.EmployeeId,emp.FirstName,emp.LastName
ORDER BY emp.EmployeeId;

-- 17. Which sales agent made the most dollars in sales in 2009?
SELECT ROUND(SUM(invo.Total),2) AS 'Total Sales in Dollors',
emp.EmployeeId AS 'Employee ID',
emp.LastName AS 'Sales Agent Last Name',
emp.FirstName AS 'Sales Agent First Name'
FROM chinook.invoices AS invo
INNER JOIN chinook.customers AS cus
ON invo.CustomerId=cus.CustomerId
INNER JOIN chinook.employees AS emp
ON cus.SupportRepId=emp.Employeeid
WHERE invo.InvoiceDate LIKE '2009%'
AND emp.Title = 'Sales Support Agent'
GROUP BY emp.EmployeeID
ORDER BY ROUND(SUM(invo.Total),2) DESC
LIMIT 1;

